{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectTodo","className","map","todo","classNames","completed","title","type","onClick","id","TodoFilter","handleQuery","query","handleTarget","applyQuery","defaultValue","onChange","event","target","value","placeholder","ev","BASE_URL","wait","delay","Promise","resolve","setTimeout","get","url","a","fetch","res","json","Loader","TodoModal","selectedTodo","useState","user","setUser","useEffect","userId","then","person","href","email","name","App","setTodos","setSelectedTodo","setQuery","filtredTodo","setFiltredTodo","dataIsLoading","setdataIsLoading","targetValue","setTargetValue","appliedQuery","setAppliedQuery","useCallback","lodash","debounce","filterForTodos","filter","prevState","includes","loadTodos","todosFromServer","shuffle","input","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ee0031e.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { FC } from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[]\n  selectTodo: (todo: Todo)=> void;\n}\nexport const TodoList:FC<Props> = ({ todos, selectTodo }) => (\n  <table\n    data-cy=\"listOfTodos\"\n    className=\"table is-narrow is-fullwidth\"\n  >\n    <tbody>\n\n      {\n        todos?.map(todo => (\n          <tr\n            key={todo.id}\n            className={\n              classNames(\n                'has-background-success-light',\n                'has-text-success',\n                {\n                  'has-background-danger-light': !todo.completed,\n                  'has-text-danger': !todo.completed,\n                },\n              )\n            }\n          >\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon is-size-5\">\n                  <i className=\"fas fa-check-square\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              {todo.title}\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                className=\"button is-warning\"\n                type=\"button\"\n                onClick={() => selectTodo(todo)}\n              >\n                {`Show ${todo.id}`}\n              </button>\n            </td>\n          </tr>\n        ))\n      }\n    </tbody>\n  </table>\n);\n","import { FC } from 'react';\n\ninterface Props {\n  handleQuery: (input: string) => void\n  query:string\n  handleTarget: (target: string) => void\n  applyQuery: (str: string) => void\n}\n\nexport const TodoFilter:FC<Props> = ({\n  handleQuery,\n  query,\n  handleTarget,\n  applyQuery,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            defaultValue=\"all\"\n            onChange={(event) => {\n              handleTarget(event.target.value);\n            }}\n          >\n            <option\n              value=\"all\"\n            >\n              All\n            </option>\n            <option\n              value=\"active\"\n            >\n              Active\n            </option>\n            <option\n              value=\"completed\"\n            >\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"filterByTitle\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={(ev) => {\n            handleQuery(ev.target.value);\n            applyQuery(ev.target.value);\n          }}\n          value={query}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\">\n          {query && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              type=\"button\"\n              className=\"delete has-text\"\n              onClick={() => handleQuery('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nasync function get<T>(url: string): Promise<T> {\n  await wait(1000);\n  const res = await fetch(BASE_URL + url);\n\n  return res.json();\n}\n\nexport const getTodos = () => {\n  return get<Todo[]>('/todos');\n};\n\nexport const getUser = (userId:number) => {\n  return get<User>(`/users/${userId}`);\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  selectTodo: (todo:Todo) => void\n  selectedTodo: Todo\n}\n\nexport const TodoModal: FC<Props> = ({ selectTodo, selectedTodo }) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    getUser(selectedTodo.userId)\n      .then(person => setUser(person));\n  });\n\n  return (\n    <div className=\"modal is-active\">\n      <div className=\"modal-background\" />\n      {\n        !user\n          ? (<Loader />)\n          : (\n            <div className=\"modal-card\">\n              <header className=\"modal-card-head\">\n                <div className=\"modal-card-title has-text-weight-medium\">\n                  {selectedTodo.id}\n                </div>\n                <a\n                  href=\"#close\"\n                  className=\"delete\"\n                  type=\"button\"\n                  onClick={() => selectTodo(null as unknown as Todo)}\n                >\n                  Close\n                </a>\n              </header>\n\n              <div className=\"modal-card-body\">\n                <p className=\"block\">{selectedTodo.title}</p>\n\n                <p className=\"block\">\n                  {\n                    selectedTodo.completed\n                      ? (<strong className=\"has-text-success\">Done</strong>)\n                      : (<strong className=\"has-text-danger\">Planned</strong>)\n                  }\n\n                  {' by '}\n                  <a href={`mailto:${user?.email}`}>\n                    {user?.name}\n                  </a>\n                </p>\n              </div>\n            </div>\n          )\n      }\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport lodash, { shuffle } from 'lodash';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo>();\n  const [query, setQuery] = useState('');\n  const [filtredTodo, setFiltredTodo] = useState<Todo[]>([]);\n  const [dataIsLoading, setdataIsLoading] = useState(true);\n  const [targetValue, setTargetValue] = useState('all');\n  const [appliedQuery, setAppliedQuery] = useState('');\n\n  const applyQuery = useCallback(\n    lodash.debounce(setAppliedQuery, 1000), [],\n  );\n\n  const selectTodo = (todo: Todo):void => {\n    setSelectedTodo(todo);\n  };\n\n  const handleQuery = (input: string) => {\n    setQuery(input);\n  };\n\n  const handleTarget = (target: string) => {\n    setTargetValue(target);\n  };\n\n  const filterForTodos = (target: string) => {\n    switch (target) {\n      case 'active':\n        setFiltredTodo(todos.filter(todo => !todo.completed));\n        break;\n\n      case 'completed':\n        setFiltredTodo(todos.filter(todo => todo.completed));\n        break;\n\n      default:\n        setFiltredTodo(todos);\n        break;\n    }\n\n    setFiltredTodo(prevState => {\n      return prevState.filter(todo => todo.title.includes(appliedQuery));\n    });\n  };\n\n  useEffect(() => {\n    const loadTodos = async () => {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n      filterForTodos(targetValue);\n      setdataIsLoading(false);\n    };\n\n    loadTodos();\n  }, []);\n\n  useEffect(() => {\n    filterForTodos(targetValue);\n  }, [todos, appliedQuery, targetValue]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <div className=\"is-flex is-justify-content-space-between\">\n              <h1 className=\"title\">Todos:</h1>\n              <button\n                className=\"button is-black\"\n                type=\"button\"\n                onClick={() => {\n                  setFiltredTodo(prevState => shuffle(prevState));\n                }}\n              >\n                Shake\n              </button>\n            </div>\n\n            <div className=\"block\">\n              <TodoFilter\n                handleQuery={handleQuery}\n                query={query}\n                handleTarget={handleTarget}\n                applyQuery={applyQuery}\n\n              />\n            </div>\n\n            <div className=\"block\">\n              { dataIsLoading\n                ? (\n                  <Loader />\n\n                )\n                : (\n                  <TodoList\n                    todos={filtredTodo}\n                    selectTodo={selectTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          selectTodo={selectTodo}\n        />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport './general.scss';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}